import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Link, Upload, X } from 'lucide-react';
import { cn } from '../../utils/cn';
import {
  Modal,
  ModalHeader,
  ModalTitle,
  ModalDescription,
  ModalBody,
  ModalFooter
} from '../ui/Modal';
import Button from '../ui/Button';
import DesireScoreDisplay from './DesireScoreDisplay';
import TagChip, { TagGroup } from './TagChip';
import { mockCategories, mockCollections } from '../data/mockData';

/**
 * AddWishModal Component - Modal for adding new wish items
 *
 * Features:
 * - Form validation with real-time feedback
 * - Image upload with preview
 * - URL metadata extraction (placeholder)
 * - Interactive desire score selector
 * - Category tag management
 * - Collection assignment
 * - Privacy settings
 * - Responsive form layout
 *
 * @param {boolean} isOpen - Whether modal is open
 * @param {function} onClose - Close handler
 * @param {function} onSave - Save handler that receives the wish data
 * @param {string} defaultCollection - Default collection ID
 */
const AddWishModal = React.forwardRef(({
  isOpen = false,
  onClose,
  onSave,
  defaultCollection = 'all',
  ...props
}, ref) => {

  // FORM STATE
  const [formData, setFormData] = useState({
    name: '',
    link: '',
    imageUrl: '',
    desireScore: 5,
    categoryTags: [],
    isPrivate: false,
    description: '',
    collectionId: defaultCollection === 'all' ? '' : defaultCollection
  });

  const [errors, setErrors] = useState({});
  const [loading, setLoading] = useState(false);
  const [imagePreview, setImagePreview] = useState(null);

  // HANDLERS
  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));

    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: null }));
    }
  };

  const handleUrlChange = async (url) => {
    handleInputChange('link', url);

    // TODO: Extract metadata from URL
    if (url && isValidUrl(url)) {
      try {
        // Placeholder for URL metadata extraction
        console.log('TODO: Extract metadata from:', url);
        // const metadata = await extractMetadataFromUrl(url);
        // setFormData(prev => ({
        //   ...prev,
        //   name: prev.name || metadata.title,
        //   imageUrl: prev.imageUrl || metadata.image,
        //   description: prev.description || metadata.description
        // }));
      } catch (error) {
        console.error('Failed to extract metadata:', error);
      }
    }
  };

  const handleImageUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      // TODO: Upload image and get URL
      const reader = new FileReader();
      reader.onload = (e) => {
        setImagePreview(e.target.result);
        handleInputChange('imageUrl', e.target.result); // In real app, this would be the uploaded URL
      };
      reader.readAsDataURL(file);
    }
  };

  const handleAddTag = (tag) => {
    if (!formData.categoryTags.includes(tag)) {
      handleInputChange('categoryTags', [...formData.categoryTags, tag]);
    }
  };

  const handleRemoveTag = (tag) => {
    handleInputChange('categoryTags', formData.categoryTags.filter(t => t !== tag));
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.name.trim()) {
      newErrors.name = 'Name is required';
    }

    if (!formData.link.trim()) {
      newErrors.link = 'Product link is required';
    } else if (!isValidUrl(formData.link)) {
      newErrors.link = 'Please enter a valid URL';
    }

    if (!formData.description.trim()) {
      newErrors.description = 'Description is required';
    }

    if (formData.desireScore < 1 || formData.desireScore > 10) {
      newErrors.desireScore = 'Desire score must be between 1 and 10';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSave = async () => {
    if (!validateForm()) return;

    setLoading(true);

    try {
      // Generate ID and add metadata
      const wishData = {
        ...formData,
        id: `wish-${Date.now()}`, // In real app, this would be generated by backend
        dateAdded: new Date(),
        isDibbed: false,
        dibbedBy: null
      };

      await onSave?.(wishData);
      handleClose();
    } catch (error) {
      console.error('Failed to save wish item:', error);
      // TODO: Show error toast
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    setFormData({
      name: '',
      link: '',
      imageUrl: '',
      desireScore: 5,
      categoryTags: [],
      isPrivate: false,
      description: '',
      collectionId: defaultCollection === 'all' ? '' : defaultCollection
    });
    setErrors({});
    setImagePreview(null);
    onClose?.();
  };

  // Helper function
  const isValidUrl = (string) => {
    try {
      new URL(string);
      return true;
    } catch (_) {
      return false;
    }
  };

  return (
    <Modal
      ref={ref}
      isOpen={isOpen}
      onClose={handleClose}
      size="lg"
      {...props}
    >
      <ModalHeader>
        <ModalTitle>Add New Wish Item</ModalTitle>
        <ModalDescription>
          Add something you desire to your wishlist. Fill in the details below.
        </ModalDescription>
      </ModalHeader>

      <ModalBody scrollable>
        <div className="space-y-responsive-lg">
          {/* Product Link */}
          <div>
            <label className="block text-responsive-sm font-medium text-foreground mb-2">
              Product Link *
            </label>
            <div className="relative">
              <input
                type="url"
                value={formData.link}
                onChange={(e) => handleUrlChange(e.target.value)}
                placeholder="https://example.com/product"
                className={cn(
                  'w-full pl-10 pr-4 py-3 border rounded-lg',
                  'bg-background text-foreground placeholder:text-muted',
                  'focus:outline-none focus:ring-2 focus:ring-primary-500/50',
                  'transition-all duration-200',
                  errors.link ? 'border-error' : 'border-border hover:border-primary-500/50'
                )}
              />
              <Link className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted" />
            </div>
            {errors.link && (
              <p className="mt-1 text-responsive-xs text-error">{errors.link}</p>
            )}
          </div>

          {/* Name */}
          <div>
            <label className="block text-responsive-sm font-medium text-foreground mb-2">
              Item Name *
            </label>
            <input
              type="text"
              value={formData.name}
              onChange={(e) => handleInputChange('name', e.target.value)}
              placeholder="What do you want to call this item?"
              className={cn(
                'w-full px-4 py-3 border rounded-lg',
                'bg-background text-foreground placeholder:text-muted',
                'focus:outline-none focus:ring-2 focus:ring-primary-500/50',
                'transition-all duration-200',
                errors.name ? 'border-error' : 'border-border hover:border-primary-500/50'
              )}
            />
            {errors.name && (
              <p className="mt-1 text-responsive-xs text-error">{errors.name}</p>
            )}
          </div>

          {/* Image Upload */}
          <div>
            <label className="block text-responsive-sm font-medium text-foreground mb-2">
              Product Image
            </label>
            <div className="space-y-3">
              {/* Image URL Input */}
              <input
                type="url"
                value={formData.imageUrl}
                onChange={(e) => handleInputChange('imageUrl', e.target.value)}
                placeholder="https://example.com/image.jpg or upload below"
                className={cn(
                  'w-full px-4 py-3 border rounded-lg',
                  'bg-background text-foreground placeholder:text-muted',
                  'focus:outline-none focus:ring-2 focus:ring-primary-500/50',
                  'transition-all duration-200',
                  'border-border hover:border-primary-500/50'
                )}
              />

              {/* Upload Button */}
              <div className="flex items-center gap-3">
                <label className="cursor-pointer">
                  <input
                    type="file"
                    accept="image/*"
                    onChange={handleImageUpload}
                    className="hidden"
                  />
                  <div className={cn(
                    'inline-flex items-center px-4 py-2 border border-border rounded-lg',
                    'bg-surface hover:bg-primary-50 text-foreground hover:text-primary-600',
                    'transition-all duration-200 cursor-pointer'
                  )}>
                    <Upload className="w-4 h-4 mr-2" />
                    Upload Image
                  </div>
                </label>

                {/* Image Preview */}
                {(imagePreview || formData.imageUrl) && (
                  <div className="relative">
                    <img
                      src={imagePreview || formData.imageUrl}
                      alt="Preview"
                      className="w-16 h-16 object-cover rounded-lg border border-border"
                    />
                    <button
                      onClick={() => {
                        setImagePreview(null);
                        handleInputChange('imageUrl', '');
                      }}
                      className="absolute -top-1 -right-1 w-5 h-5 bg-error text-white rounded-full flex items-center justify-center text-xs"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Description */}
          <div>
            <label className="block text-responsive-sm font-medium text-foreground mb-2">
              Why do you want this? *
            </label>
            <textarea
              value={formData.description}
              onChange={(e) => handleInputChange('description', e.target.value)}
              placeholder="Describe why you want this item and what it means to you..."
              rows={3}
              className={cn(
                'w-full px-4 py-3 border rounded-lg resize-none',
                'bg-background text-foreground placeholder:text-muted',
                'focus:outline-none focus:ring-2 focus:ring-primary-500/50',
                'transition-all duration-200',
                errors.description ? 'border-error' : 'border-border hover:border-primary-500/50'
              )}
            />
            {errors.description && (
              <p className="mt-1 text-responsive-xs text-error">{errors.description}</p>
            )}
          </div>

          {/* Desire Score */}
          <div>
            <label className="block text-responsive-sm font-medium text-foreground mb-3">
              Desire Score: How much do you want this?
            </label>
            <DesireScoreDisplay
              score={formData.desireScore}
              variant="hearts"
              size="md"
              interactive
              onChange={(score) => handleInputChange('desireScore', score)}
            />
            {errors.desireScore && (
              <p className="mt-1 text-responsive-xs text-error">{errors.desireScore}</p>
            )}
          </div>

          {/* Category Tags */}
          <div>
            <label className="block text-responsive-sm font-medium text-foreground mb-3">
              Category Tags
            </label>
            <div className="space-y-3">
              {/* Selected Tags */}
              {formData.categoryTags.length > 0 && (
                <TagGroup>
                  {formData.categoryTags.map(tag => (
                    <TagChip
                      key={tag}
                      variant="primary"
                      removable
                      onRemove={() => handleRemoveTag(tag)}
                    >
                      {tag}
                    </TagChip>
                  ))}
                </TagGroup>
              )}

              {/* Available Tags */}
              <div>
                <p className="text-responsive-xs text-muted mb-2">Available tags:</p>
                <TagGroup>
                  {mockCategories
                    .filter(tag => !formData.categoryTags.includes(tag))
                    .slice(0, 12)
                    .map(tag => (
                      <TagChip
                        key={tag}
                        variant="outline"
                        clickable
                        onClick={() => handleAddTag(tag)}
                      >
                        {tag}
                      </TagChip>
                    ))}
                </TagGroup>
              </div>
            </div>
          </div>

          {/* Collection */}
          <div>
            <label className="block text-responsive-sm font-medium text-foreground mb-2">
              Collection
            </label>
            <select
              value={formData.collectionId}
              onChange={(e) => handleInputChange('collectionId', e.target.value)}
              className={cn(
                'w-full px-4 py-3 border rounded-lg',
                'bg-background text-foreground',
                'focus:outline-none focus:ring-2 focus:ring-primary-500/50',
                'transition-all duration-200',
                'border-border hover:border-primary-500/50'
              )}
            >
              <option value="">No Collection</option>
              {mockCollections
                .filter(col => !col.isDefault)
                .map(collection => (
                  <option key={collection.id} value={collection.id}>
                    {collection.icon} {collection.name}
                  </option>
                ))}
            </select>
          </div>

          {/* Privacy Setting */}
          <div>
            <label className="flex items-center gap-3 cursor-pointer">
              <input
                type="checkbox"
                checked={formData.isPrivate}
                onChange={(e) => handleInputChange('isPrivate', e.target.checked)}
                className="w-4 h-4 text-primary-500 border-border rounded focus:ring-2 focus:ring-primary-500/50"
              />
              <div>
                <span className="text-responsive-sm font-medium text-foreground">
                  Make this item private
                </span>
                <p className="text-responsive-xs text-muted">
                  Private items are only visible to you
                </p>
              </div>
            </label>
          </div>
        </div>
      </ModalBody>

      <ModalFooter>
        <Button
          variant="ghost"
          onClick={handleClose}
          disabled={loading}
        >
          Cancel
        </Button>
        <Button
          variant="primary"
          onClick={handleSave}
          loading={loading}
          disabled={loading}
        >
          Add to Wishlist
        </Button>
      </ModalFooter>
    </Modal>
  );
});

AddWishModal.displayName = 'AddWishModal';

export default AddWishModal;

/*
USAGE EXAMPLES:

// Basic add modal
<AddWishModal
  isOpen={showAddModal}
  onClose={() => setShowAddModal(false)}
  onSave={handleAddWishItem}
/>

// With default collection
<AddWishModal
  isOpen={showAddModal}
  onClose={() => setShowAddModal(false)}
  onSave={handleAddWishItem}
  defaultCollection="tech"
/>

// Handle save event
const handleAddWishItem = async (wishData) => {
  try {
    // TODO: Call your backend API
    // const result = await createWishItem(user.id, wishData);
    console.log('New wish item:', wishData);

    // Update local state
    setWishItems(prev => [...prev, wishData]);

    // Show success message
    toast.success('Item added to your wishlist!');
  } catch (error) {
    console.error('Failed to add item:', error);
    toast.error('Failed to add item. Please try again.');
  }
};

FEATURES:
- Form validation with real-time feedback
- URL metadata extraction placeholder (for auto-filling)
- Image upload with preview and URL input
- Interactive desire score selector
- Dynamic category tag management
- Collection assignment dropdown
- Privacy settings toggle
- Responsive form layout
- Loading states and error handling
- Professional form styling
- Accessible form controls
- Theme-aware styling

TODO ITEMS FOR BACKEND INTEGRATION:
- Implement URL metadata extraction
- Add image upload to cloud storage
- Connect to createWishItem API
- Add form validation on backend
- Implement error handling and user feedback
*/